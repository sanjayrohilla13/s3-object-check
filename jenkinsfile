def STAGE_TO_RUN =params.STAGE
def bucketName = "sanjayrohilla"
def keyName = "terraform/tfstate.tfstate"
pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        //TEMP_VAR = credentials('srv-ecr-usr')
        def DOCKER_SOURCE = " "
    }

    parameters{
        choice(name: 'ENVIRONMENT', choices: ['dev','prod'], description: 'Select the Environment Name')
        choice(name: 'DOCKER_SRC', choices: ['ECR','artifactory'], description: 'Source of Sonarqube Docker Source')
        choice(name: 'STAGE', choices: ['plan','deploy','destroy'], description: 'Terraform Stage to Apply')
    }
    stages {
        stage('Download GIT Hub Repo') {
            steps {
                echo 'Downloading..'
                script {
                    git credentialsId: 'sanjayrohilla13', branch: 'master', url: 'https://github.com/sanjayrohilla13/base-infra', poll: false
                }
            }
        }
// plan stage
        stage('Plan-Base-Infra') {
            when{expression{STAGE_TO_RUN.contains('plan')}}
            steps {
                withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID',credentialsId:'srv-ecr-usr',secretKeyVariable:'AWS_SECRET_ACCESS_KEY')]) {
                    sh (script: '''
                        aws s3api head-object --bucket sanjayrohilla --key terraform/tfstate.tfstate
                        exists = s3DoesObjectExist(bucket:'my-bucket', path:'path/to/source/file.txt')
                        echo ${exists}
                        '''
                }  
            }  
        }
    }
}

